//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the amcl package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __amcl__AMCLCONFIG_H__
#define __amcl__AMCLCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace amcl
{
  class AMCLConfigStatics;

  class AMCLConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(AMCLConfig &config, const AMCLConfig &max, const AMCLConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const AMCLConfig &config1, const AMCLConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, AMCLConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const AMCLConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AMCLConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const AMCLConfig &config) const = 0;
      virtual void getValue(const AMCLConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T AMCLConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (AMCLConfig::* field);

      virtual void clamp(AMCLConfig &config, const AMCLConfig &max, const AMCLConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const AMCLConfig &config1, const AMCLConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, AMCLConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const AMCLConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AMCLConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const AMCLConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const AMCLConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, AMCLConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, AMCLConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<AMCLConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(AMCLConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_particles"==(*_i)->name){min_particles = boost::any_cast<int>(val);}
        if("max_particles"==(*_i)->name){max_particles = boost::any_cast<int>(val);}
        if("kld_err"==(*_i)->name){kld_err = boost::any_cast<double>(val);}
        if("kld_z"==(*_i)->name){kld_z = boost::any_cast<double>(val);}
        if("update_min_d"==(*_i)->name){update_min_d = boost::any_cast<double>(val);}
        if("update_min_a"==(*_i)->name){update_min_a = boost::any_cast<double>(val);}
        if("resample_interval"==(*_i)->name){resample_interval = boost::any_cast<int>(val);}
        if("transform_tolerance"==(*_i)->name){transform_tolerance = boost::any_cast<double>(val);}
        if("recovery_alpha_slow"==(*_i)->name){recovery_alpha_slow = boost::any_cast<double>(val);}
        if("recovery_alpha_fast"==(*_i)->name){recovery_alpha_fast = boost::any_cast<double>(val);}
        if("do_beamskip"==(*_i)->name){do_beamskip = boost::any_cast<bool>(val);}
        if("beam_skip_distance"==(*_i)->name){beam_skip_distance = boost::any_cast<double>(val);}
        if("beam_skip_threshold"==(*_i)->name){beam_skip_threshold = boost::any_cast<double>(val);}
        if("tf_broadcast"==(*_i)->name){tf_broadcast = boost::any_cast<bool>(val);}
        if("gui_publish_rate"==(*_i)->name){gui_publish_rate = boost::any_cast<double>(val);}
        if("save_pose_rate"==(*_i)->name){save_pose_rate = boost::any_cast<double>(val);}
        if("use_map_topic"==(*_i)->name){use_map_topic = boost::any_cast<bool>(val);}
        if("first_map_only"==(*_i)->name){first_map_only = boost::any_cast<bool>(val);}
        if("laser_min_range"==(*_i)->name){laser_min_range = boost::any_cast<double>(val);}
        if("laser_max_range"==(*_i)->name){laser_max_range = boost::any_cast<double>(val);}
        if("laser_max_beams"==(*_i)->name){laser_max_beams = boost::any_cast<int>(val);}
        if("laser_z_hit"==(*_i)->name){laser_z_hit = boost::any_cast<double>(val);}
        if("laser_z_short"==(*_i)->name){laser_z_short = boost::any_cast<double>(val);}
        if("laser_z_max"==(*_i)->name){laser_z_max = boost::any_cast<double>(val);}
        if("laser_z_rand"==(*_i)->name){laser_z_rand = boost::any_cast<double>(val);}
        if("laser_sigma_hit"==(*_i)->name){laser_sigma_hit = boost::any_cast<double>(val);}
        if("laser_lambda_short"==(*_i)->name){laser_lambda_short = boost::any_cast<double>(val);}
        if("laser_likelihood_max_dist"==(*_i)->name){laser_likelihood_max_dist = boost::any_cast<double>(val);}
        if("laser_model_type"==(*_i)->name){laser_model_type = boost::any_cast<std::string>(val);}
        if("odom_model_type"==(*_i)->name){odom_model_type = boost::any_cast<std::string>(val);}
        if("odom_alpha1"==(*_i)->name){odom_alpha1 = boost::any_cast<double>(val);}
        if("odom_alpha2"==(*_i)->name){odom_alpha2 = boost::any_cast<double>(val);}
        if("odom_alpha3"==(*_i)->name){odom_alpha3 = boost::any_cast<double>(val);}
        if("odom_alpha4"==(*_i)->name){odom_alpha4 = boost::any_cast<double>(val);}
        if("odom_alpha5"==(*_i)->name){odom_alpha5 = boost::any_cast<double>(val);}
        if("odom_frame_id"==(*_i)->name){odom_frame_id = boost::any_cast<std::string>(val);}
        if("base_frame_id"==(*_i)->name){base_frame_id = boost::any_cast<std::string>(val);}
        if("global_frame_id"==(*_i)->name){global_frame_id = boost::any_cast<std::string>(val);}
        if("restore_defaults"==(*_i)->name){restore_defaults = boost::any_cast<bool>(val);}
      }
    }

    int min_particles;
int max_particles;
double kld_err;
double kld_z;
double update_min_d;
double update_min_a;
int resample_interval;
double transform_tolerance;
double recovery_alpha_slow;
double recovery_alpha_fast;
bool do_beamskip;
double beam_skip_distance;
double beam_skip_threshold;
bool tf_broadcast;
double gui_publish_rate;
double save_pose_rate;
bool use_map_topic;
bool first_map_only;
double laser_min_range;
double laser_max_range;
int laser_max_beams;
double laser_z_hit;
double laser_z_short;
double laser_z_max;
double laser_z_rand;
double laser_sigma_hit;
double laser_lambda_short;
double laser_likelihood_max_dist;
std::string laser_model_type;
std::string odom_model_type;
double odom_alpha1;
double odom_alpha2;
double odom_alpha3;
double odom_alpha4;
double odom_alpha5;
std::string odom_frame_id;
std::string base_frame_id;
std::string global_frame_id;
bool restore_defaults;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_particles;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_particles;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kld_err;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kld_z;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double update_min_d;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double update_min_a;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int resample_interval;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double transform_tolerance;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double recovery_alpha_slow;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double recovery_alpha_fast;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool do_beamskip;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double beam_skip_distance;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double beam_skip_threshold;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool tf_broadcast;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gui_publish_rate;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double save_pose_rate;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_map_topic;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool first_map_only;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_min_range;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_max_range;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int laser_max_beams;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_z_hit;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_z_short;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_z_max;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_z_rand;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_sigma_hit;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_lambda_short;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double laser_likelihood_max_dist;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string laser_model_type;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string odom_model_type;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double odom_alpha1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double odom_alpha2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double odom_alpha3;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double odom_alpha4;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double odom_alpha5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string odom_frame_id;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string base_frame_id;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string global_frame_id;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool restore_defaults;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("AMCLConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const AMCLConfig &__max__ = __getMax__();
      const AMCLConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const AMCLConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const AMCLConfig &__getDefault__();
    static const AMCLConfig &__getMax__();
    static const AMCLConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const AMCLConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void AMCLConfig::ParamDescription<std::string>::clamp(AMCLConfig &config, const AMCLConfig &max, const AMCLConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class AMCLConfigStatics
  {
    friend class AMCLConfig;

    AMCLConfigStatics()
    {
AMCLConfig::GroupDescription<AMCLConfig::DEFAULT, AMCLConfig> Default("Default", "", 0, 0, true, &AMCLConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_particles = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_particles = 1000;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_particles = 100;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("min_particles", "int", 0, "Minimum allowed number of particles.", "", &AMCLConfig::min_particles)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("min_particles", "int", 0, "Minimum allowed number of particles.", "", &AMCLConfig::min_particles)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_particles = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_particles = 10000;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_particles = 5000;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("max_particles", "int", 0, "Mamimum allowed number of particles.", "", &AMCLConfig::max_particles)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("max_particles", "int", 0, "Mamimum allowed number of particles.", "", &AMCLConfig::max_particles)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kld_err = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kld_err = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kld_err = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("kld_err", "double", 0, "Maximum error between the true distribution and the estimated distribution.", "", &AMCLConfig::kld_err)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("kld_err", "double", 0, "Maximum error between the true distribution and the estimated distribution.", "", &AMCLConfig::kld_err)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kld_z = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kld_z = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kld_z = 0.99;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("kld_z", "double", 0, "Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.", "", &AMCLConfig::kld_z)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("kld_z", "double", 0, "Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.", "", &AMCLConfig::kld_z)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.update_min_d = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.update_min_d = 5.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.update_min_d = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("update_min_d", "double", 0, "Translational movement required before performing a filter update.", "", &AMCLConfig::update_min_d)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("update_min_d", "double", 0, "Translational movement required before performing a filter update.", "", &AMCLConfig::update_min_d)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.update_min_a = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.update_min_a = 6.28318530718;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.update_min_a = 0.523598775598;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("update_min_a", "double", 0, "Rotational movement required before performing a filter update.", "", &AMCLConfig::update_min_a)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("update_min_a", "double", 0, "Rotational movement required before performing a filter update.", "", &AMCLConfig::update_min_a)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.resample_interval = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.resample_interval = 20;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.resample_interval = 2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("resample_interval", "int", 0, "Number of filter updates required before resampling.", "", &AMCLConfig::resample_interval)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("resample_interval", "int", 0, "Number of filter updates required before resampling.", "", &AMCLConfig::resample_interval)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.transform_tolerance = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.transform_tolerance = 2.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.transform_tolerance = 0.1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("transform_tolerance", "double", 0, "Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.", "", &AMCLConfig::transform_tolerance)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("transform_tolerance", "double", 0, "Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.", "", &AMCLConfig::transform_tolerance)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.recovery_alpha_slow = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.recovery_alpha_slow = 0.5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.recovery_alpha_slow = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("recovery_alpha_slow", "double", 0, "Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.", "", &AMCLConfig::recovery_alpha_slow)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("recovery_alpha_slow", "double", 0, "Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.", "", &AMCLConfig::recovery_alpha_slow)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.recovery_alpha_fast = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.recovery_alpha_fast = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.recovery_alpha_fast = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("recovery_alpha_fast", "double", 0, "Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.", "", &AMCLConfig::recovery_alpha_fast)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("recovery_alpha_fast", "double", 0, "Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.", "", &AMCLConfig::recovery_alpha_fast)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.do_beamskip = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.do_beamskip = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.do_beamskip = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("do_beamskip", "bool", 0, "When true skips laser scans when a scan doesnt work for a majority of particles", "", &AMCLConfig::do_beamskip)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("do_beamskip", "bool", 0, "When true skips laser scans when a scan doesnt work for a majority of particles", "", &AMCLConfig::do_beamskip)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.beam_skip_distance = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.beam_skip_distance = 2.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.beam_skip_distance = 0.5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("beam_skip_distance", "double", 0, "Distance from a valid map point before scan is considered invalid", "", &AMCLConfig::beam_skip_distance)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("beam_skip_distance", "double", 0, "Distance from a valid map point before scan is considered invalid", "", &AMCLConfig::beam_skip_distance)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.beam_skip_threshold = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.beam_skip_threshold = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.beam_skip_threshold = 0.3;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("beam_skip_threshold", "double", 0, "Ratio of samples for which the scans are valid to consider as valid scan", "", &AMCLConfig::beam_skip_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("beam_skip_threshold", "double", 0, "Ratio of samples for which the scans are valid to consider as valid scan", "", &AMCLConfig::beam_skip_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tf_broadcast = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tf_broadcast = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tf_broadcast = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("tf_broadcast", "bool", 0, "When true (the default), publish results via TF.  When false, do not.", "", &AMCLConfig::tf_broadcast)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("tf_broadcast", "bool", 0, "When true (the default), publish results via TF.  When false, do not.", "", &AMCLConfig::tf_broadcast)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gui_publish_rate = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gui_publish_rate = 100.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gui_publish_rate = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("gui_publish_rate", "double", 0, "Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.", "", &AMCLConfig::gui_publish_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("gui_publish_rate", "double", 0, "Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.", "", &AMCLConfig::gui_publish_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.save_pose_rate = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.save_pose_rate = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.save_pose_rate = 0.5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("save_pose_rate", "double", 0, "Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable.", "", &AMCLConfig::save_pose_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("save_pose_rate", "double", 0, "Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable.", "", &AMCLConfig::save_pose_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_map_topic = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_map_topic = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_map_topic = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("use_map_topic", "bool", 0, "When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.", "", &AMCLConfig::use_map_topic)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("use_map_topic", "bool", 0, "When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.", "", &AMCLConfig::use_map_topic)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.first_map_only = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.first_map_only = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.first_map_only = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("first_map_only", "bool", 0, "When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.", "", &AMCLConfig::first_map_only)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("first_map_only", "bool", 0, "When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.", "", &AMCLConfig::first_map_only)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_min_range = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_min_range = 1000.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_min_range = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_min_range", "double", 0, "Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.", "", &AMCLConfig::laser_min_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_min_range", "double", 0, "Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.", "", &AMCLConfig::laser_min_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_max_range = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_max_range = 1000.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_max_range = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_max_range", "double", 0, "Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used.", "", &AMCLConfig::laser_max_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_max_range", "double", 0, "Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used.", "", &AMCLConfig::laser_max_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_max_beams = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_max_beams = 250;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_max_beams = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("laser_max_beams", "int", 0, "How many evenly-spaced beams in each scan to be used when updating the filter.", "", &AMCLConfig::laser_max_beams)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<int>("laser_max_beams", "int", 0, "How many evenly-spaced beams in each scan to be used when updating the filter.", "", &AMCLConfig::laser_max_beams)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_z_hit = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_z_hit = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_z_hit = 0.95;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_hit", "double", 0, "Mixture weight for the z_hit part of the model.", "", &AMCLConfig::laser_z_hit)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_hit", "double", 0, "Mixture weight for the z_hit part of the model.", "", &AMCLConfig::laser_z_hit)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_z_short = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_z_short = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_z_short = 0.1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_short", "double", 0, "Mixture weight for the z_short part of the model.", "", &AMCLConfig::laser_z_short)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_short", "double", 0, "Mixture weight for the z_short part of the model.", "", &AMCLConfig::laser_z_short)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_z_max = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_z_max = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_z_max = 0.05;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_max", "double", 0, "Mixture weight for the z_max part of the model.", "", &AMCLConfig::laser_z_max)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_max", "double", 0, "Mixture weight for the z_max part of the model.", "", &AMCLConfig::laser_z_max)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_z_rand = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_z_rand = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_z_rand = 0.05;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_rand", "double", 0, "Mixture weight for the z_rand part of the model.", "", &AMCLConfig::laser_z_rand)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_z_rand", "double", 0, "Mixture weight for the z_rand part of the model.", "", &AMCLConfig::laser_z_rand)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_sigma_hit = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_sigma_hit = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_sigma_hit = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_sigma_hit", "double", 0, "Standard deviation for Gaussian model used in z_hit part of the model.", "", &AMCLConfig::laser_sigma_hit)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_sigma_hit", "double", 0, "Standard deviation for Gaussian model used in z_hit part of the model.", "", &AMCLConfig::laser_sigma_hit)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_lambda_short = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_lambda_short = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_lambda_short = 0.1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_lambda_short", "double", 0, "Exponential decay parameter for z_short part of model.", "", &AMCLConfig::laser_lambda_short)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_lambda_short", "double", 0, "Exponential decay parameter for z_short part of model.", "", &AMCLConfig::laser_lambda_short)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_likelihood_max_dist = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_likelihood_max_dist = 20.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_likelihood_max_dist = 2.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_likelihood_max_dist", "double", 0, "Maximum distance to do obstacle inflation on map, for use in likelihood_field model.", "", &AMCLConfig::laser_likelihood_max_dist)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("laser_likelihood_max_dist", "double", 0, "Maximum distance to do obstacle inflation on map, for use in likelihood_field model.", "", &AMCLConfig::laser_likelihood_max_dist)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_model_type = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_model_type = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_model_type = "likelihood_field";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("laser_model_type", "str", 0, "Which model to use, either beam, likelihood_field or likelihood_field_prob.", "{'enum_description': 'Laser Models', 'enum': [{'srcline': 52, 'description': 'Use beam laser model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'beam', 'ctype': 'std::string', 'type': 'str', 'name': 'beam_const'}, {'srcline': 52, 'description': 'Use likelihood_field laser model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'likelihood_field', 'ctype': 'std::string', 'type': 'str', 'name': 'likelihood_field_const'}, {'srcline': 52, 'description': 'Use likelihood_field_prob laser model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'likelihood_field_prob', 'ctype': 'std::string', 'type': 'str', 'name': 'likelihood_field_prob'}]}", &AMCLConfig::laser_model_type)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("laser_model_type", "str", 0, "Which model to use, either beam, likelihood_field or likelihood_field_prob.", "{'enum_description': 'Laser Models', 'enum': [{'srcline': 52, 'description': 'Use beam laser model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'beam', 'ctype': 'std::string', 'type': 'str', 'name': 'beam_const'}, {'srcline': 52, 'description': 'Use likelihood_field laser model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'likelihood_field', 'ctype': 'std::string', 'type': 'str', 'name': 'likelihood_field_const'}, {'srcline': 52, 'description': 'Use likelihood_field_prob laser model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'likelihood_field_prob', 'ctype': 'std::string', 'type': 'str', 'name': 'likelihood_field_prob'}]}", &AMCLConfig::laser_model_type)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_model_type = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_model_type = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_model_type = "diff";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("odom_model_type", "str", 0, "Which model to use, diff, omni, diff-corrected, or omni-corrected", "{'enum_description': 'Odom Models', 'enum': [{'srcline': 56, 'description': 'Use diff odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'diff', 'ctype': 'std::string', 'type': 'str', 'name': 'diff_const'}, {'srcline': 57, 'description': 'Use omni odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'omni', 'ctype': 'std::string', 'type': 'str', 'name': 'omni_const'}, {'srcline': 58, 'description': 'Use corrected diff odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'diff-corrected', 'ctype': 'std::string', 'type': 'str', 'name': 'diff_corrected_const'}, {'srcline': 59, 'description': 'Use corrected omni odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'omni-corrected', 'ctype': 'std::string', 'type': 'str', 'name': 'omni_corrected_const'}]}", &AMCLConfig::odom_model_type)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("odom_model_type", "str", 0, "Which model to use, diff, omni, diff-corrected, or omni-corrected", "{'enum_description': 'Odom Models', 'enum': [{'srcline': 56, 'description': 'Use diff odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'diff', 'ctype': 'std::string', 'type': 'str', 'name': 'diff_const'}, {'srcline': 57, 'description': 'Use omni odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'omni', 'ctype': 'std::string', 'type': 'str', 'name': 'omni_const'}, {'srcline': 58, 'description': 'Use corrected diff odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'diff-corrected', 'ctype': 'std::string', 'type': 'str', 'name': 'diff_corrected_const'}, {'srcline': 59, 'description': 'Use corrected omni odom model', 'srcfile': '/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg', 'cconsttype': 'const char * const', 'value': 'omni-corrected', 'ctype': 'std::string', 'type': 'str', 'name': 'omni_corrected_const'}]}", &AMCLConfig::odom_model_type)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_alpha1 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_alpha1 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_alpha1 = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha1", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.", "", &AMCLConfig::odom_alpha1)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha1", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.", "", &AMCLConfig::odom_alpha1)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_alpha2 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_alpha2 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_alpha2 = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha2", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.", "", &AMCLConfig::odom_alpha2)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha2", "double", 0, "Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.", "", &AMCLConfig::odom_alpha2)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_alpha3 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_alpha3 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_alpha3 = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha3", "double", 0, "Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.", "", &AMCLConfig::odom_alpha3)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha3", "double", 0, "Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.", "", &AMCLConfig::odom_alpha3)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_alpha4 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_alpha4 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_alpha4 = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha4", "double", 0, "Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.", "", &AMCLConfig::odom_alpha4)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha4", "double", 0, "Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.", "", &AMCLConfig::odom_alpha4)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_alpha5 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_alpha5 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_alpha5 = 0.2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha5", "double", 0, "Translation-related noise parameter (only used if model is omni).", "", &AMCLConfig::odom_alpha5)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<double>("odom_alpha5", "double", 0, "Translation-related noise parameter (only used if model is omni).", "", &AMCLConfig::odom_alpha5)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.odom_frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.odom_frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.odom_frame_id = "odom";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("odom_frame_id", "str", 0, "Which frame to use for odometry.", "", &AMCLConfig::odom_frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("odom_frame_id", "str", 0, "Which frame to use for odometry.", "", &AMCLConfig::odom_frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.base_frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.base_frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.base_frame_id = "base_link";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("base_frame_id", "str", 0, "Which frame to use for the robot base.", "", &AMCLConfig::base_frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("base_frame_id", "str", 0, "Which frame to use for the robot base.", "", &AMCLConfig::base_frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.global_frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.global_frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.global_frame_id = "map";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("global_frame_id", "str", 0, "The name of the coordinate frame published by the localization system.", "", &AMCLConfig::global_frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<std::string>("global_frame_id", "str", 0, "The name of the coordinate frame published by the localization system.", "", &AMCLConfig::global_frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.restore_defaults = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.restore_defaults = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.restore_defaults = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("restore_defaults", "bool", 0, "Retsore the default configuration", "", &AMCLConfig::restore_defaults)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AMCLConfig::AbstractParamDescriptionConstPtr(new AMCLConfig::ParamDescription<bool>("restore_defaults", "bool", 0, "Retsore the default configuration", "", &AMCLConfig::restore_defaults)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(AMCLConfig::AbstractGroupDescriptionConstPtr(new AMCLConfig::GroupDescription<AMCLConfig::DEFAULT, AMCLConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<AMCLConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<AMCLConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<AMCLConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    AMCLConfig __max__;
    AMCLConfig __min__;
    AMCLConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const AMCLConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static AMCLConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &AMCLConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const AMCLConfig &AMCLConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const AMCLConfig &AMCLConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const AMCLConfig &AMCLConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<AMCLConfig::AbstractParamDescriptionConstPtr> &AMCLConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<AMCLConfig::AbstractGroupDescriptionConstPtr> &AMCLConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const AMCLConfigStatics *AMCLConfig::__get_statics__()
  {
    const static AMCLConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = AMCLConfigStatics::get_instance();

    return statics;
  }

//#line 52 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_beam_const = "beam";
//#line 52 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_likelihood_field_const = "likelihood_field";
//#line 52 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_likelihood_field_prob = "likelihood_field_prob";
//#line 56 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_diff_const = "diff";
//#line 57 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_omni_const = "omni";
//#line 58 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_diff_corrected_const = "diff-corrected";
//#line 59 "/home/pengyang/catkin_study/src/navigation/amcl/cfg/AMCL.cfg"
      const char * const AMCL_omni_corrected_const = "omni-corrected";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __AMCLRECONFIGURATOR_H__
