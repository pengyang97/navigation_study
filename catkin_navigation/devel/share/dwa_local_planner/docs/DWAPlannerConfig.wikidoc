# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~max_trans_vel
0.default= 0.55
0.type= double
0.desc=The absolute value of the maximum translational velocity for the robot in m/s Range: 0.0 to std::numeric_limits<double>::infinity()
1.name= ~min_trans_vel
1.default= 0.1
1.type= double
1.desc=The absolute value of the minimum translational velocity for the robot in m/s Range: 0.0 to std::numeric_limits<double>::infinity()
2.name= ~max_vel_x
2.default= 0.55
2.type= double
2.desc=The maximum x velocity for the robot in m/s Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
3.name= ~min_vel_x
3.default= 0.0
3.type= double
3.desc=The minimum x velocity for the robot in m/s Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
4.name= ~max_vel_y
4.default= 0.1
4.type= double
4.desc=The maximum y velocity for the robot in m/s Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
5.name= ~min_vel_y
5.default= -0.1
5.type= double
5.desc=The minimum y velocity for the robot in m/s Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
6.name= ~max_rot_vel
6.default= 1.0
6.type= double
6.desc=The absolute value of the maximum rotational velocity for the robot in rad/s Range: 0.0 to std::numeric_limits<double>::infinity()
7.name= ~min_rot_vel
7.default= 0.4
7.type= double
7.desc=The absolute value of the minimum rotational velocity for the robot in rad/s Range: 0.0 to std::numeric_limits<double>::infinity()
8.name= ~acc_lim_x
8.default= 2.5
8.type= double
8.desc=The acceleration limit of the robot in the x direction Range: 0.0 to 20.0
9.name= ~acc_lim_y
9.default= 2.5
9.type= double
9.desc=The acceleration limit of the robot in the y direction Range: 0.0 to 20.0
10.name= ~acc_lim_theta
10.default= 3.2
10.type= double
10.desc=The acceleration limit of the robot in the theta direction Range: 0.0 to 20.0
11.name= ~acc_limit_trans
11.default= 0.1
11.type= double
11.desc=The absolute value of the maximum translational acceleration for the robot in m/s^2 Range: 0.0 to std::numeric_limits<double>::infinity()
12.name= ~prune_plan
12.default= False
12.type= bool
12.desc=Start following closest point of global plan, not first point (if different). 
13.name= ~xy_goal_tolerance
13.default= 0.1
13.type= double
13.desc=Within what maximum distance we consider the robot to be in goal Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
14.name= ~yaw_goal_tolerance
14.default= 0.1
14.type= double
14.desc=Within what maximum angle difference we consider the robot to face goal direction Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
15.name= ~trans_stopped_vel
15.default= 0.1
15.type= double
15.desc=Below what maximum velocity we consider the robot to be stopped in translation Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
16.name= ~rot_stopped_vel
16.default= 0.1
16.type= double
16.desc=Below what maximum rotation velocity we consider the robot to be stopped in rotation Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
17.name= ~sim_time
17.default= 1.7
17.type= double
17.desc=The amount of time to roll trajectories out for in seconds Range: 0.0 to std::numeric_limits<double>::infinity()
18.name= ~sim_granularity
18.default= 0.025
18.type= double
18.desc=The granularity with which to check for collisions along each trajectory in meters Range: 0.0 to std::numeric_limits<double>::infinity()
19.name= ~angular_sim_granularity
19.default= 0.1
19.type= double
19.desc=The granularity with which to check for collisions for rotations in radians Range: 0.0 to std::numeric_limits<double>::infinity()
20.name= ~path_distance_bias
20.default= 32.0
20.type= double
20.desc=The weight for the path distance part of the cost function Range: 0.0 to std::numeric_limits<double>::infinity()
21.name= ~goal_distance_bias
21.default= 24.0
21.type= double
21.desc=The weight for the goal distance part of the cost function Range: 0.0 to std::numeric_limits<double>::infinity()
22.name= ~occdist_scale
22.default= 0.01
22.type= double
22.desc=The weight for the obstacle distance part of the cost function Range: 0.0 to std::numeric_limits<double>::infinity()
23.name= ~twirling_scale
23.default= 0.0
23.type= double
23.desc=The weight for penalizing any changes in robot heading Range: 0.0 to std::numeric_limits<double>::infinity()
24.name= ~stop_time_buffer
24.default= 0.2
24.type= double
24.desc=The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds Range: 0.0 to std::numeric_limits<double>::infinity()
25.name= ~oscillation_reset_dist
25.default= 0.05
25.type= double
25.desc=The distance the robot must travel before oscillation flags are reset, in meters Range: 0.0 to std::numeric_limits<double>::infinity()
26.name= ~oscillation_reset_angle
26.default= 0.2
26.type= double
26.desc=The angle the robot must turn before oscillation flags are reset, in radians Range: 0.0 to std::numeric_limits<double>::infinity()
27.name= ~forward_point_distance
27.default= 0.325
27.type= double
27.desc=The distance from the center point of the robot to place an additional scoring point, in meters Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
28.name= ~scaling_speed
28.default= 0.25
28.type= double
28.desc=The absolute value of the velocity at which to start scaling the robot's footprint, in m/s Range: 0.0 to std::numeric_limits<double>::infinity()
29.name= ~max_scaling_factor
29.default= 0.2
29.type= double
29.desc=The maximum factor to scale the robot's footprint by Range: 0.0 to std::numeric_limits<double>::infinity()
30.name= ~vx_samples
30.default= 3
30.type= int
30.desc=The number of samples to use when exploring the x velocity space Range: 1 to 2147483647
31.name= ~vy_samples
31.default= 10
31.type= int
31.desc=The number of samples to use when exploring the y velocity space Range: 1 to 2147483647
32.name= ~vth_samples
32.default= 20
32.type= int
32.desc=The number of samples to use when exploring the theta velocity space Range: 1 to 2147483647
33.name= ~use_dwa
33.default= True
33.type= bool
33.desc=Use dynamic window approach to constrain sampling velocities to small window. 
34.name= ~restore_defaults
34.default= False
34.type= bool
34.desc=Restore to the original configuration. 
}
}
# End of autogenerated section. You may edit below.
